name: 'SecurityCodeScan'
description: 'Security Code Scan action to add NuGet packages and set up projects'
branding:
  icon: 'check-circle'
  color: 'purple'
runs:
  using: "composite"
  steps:
    - name: Set up Security-Code-Scan
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop";

        foreach($project in Get-ChildItem -Path . -Filter *.??proj -Recurse -Force) {

          $xml = [xml](Get-Content -Path $project)
          if (-not $xml.Project.xmlns) {
            dotnet add $project package SecurityCodeScan.VS2019
          }
          else {
            $packageId = "SecurityCodeScan.VS2019"
            $scs2019packages = Invoke-RestMethod -Uri "https://api-v2v3search-0.nuget.org/query?q=packageid:SecurityCodeScan.VS2019&top=true"
            $packageVersion = $scs2019packages.data.versions | Sort-Object  -Property version -Descending | Select-Object -First 1
            $packageVersion = $packageVersion.version

            $packages = $project | Split-Path -parent
            $packages = Join-Path $packages "packages.config"

            $id = get-random
            $code = @"
            using System;
            using System.Runtime.Versioning;
            using System.Text.RegularExpressions;
            using System.Xml;

        public class Program$id
        {
          public static void Main(){
            var projXml = new XmlDocument();
            projXml.Load(@"$project");

            var xmlNamespace = "http://schemas.microsoft.com/developer/msbuild/2003";
            var nsmgr = new XmlNamespaceManager(projXml.NameTable);
            nsmgr.AddNamespace("x", xmlNamespace);

            XmlNode itemGroupNode = projXml.CreateNode(XmlNodeType.Element, "ItemGroup", xmlNamespace);
            XmlNode analyzerNode = projXml.CreateNode(XmlNodeType.Element, "Analyzer", xmlNamespace);
            XmlAttribute includeAttribute = projXml.CreateAttribute("Include");
            includeAttribute.Value = $@"..\packages\$packageId.$packageVersion\analyzers\dotnet\SecurityCodeScan.VS2019.dll";
            analyzerNode.Attributes.Append(includeAttribute);
            itemGroupNode.AppendChild(analyzerNode);

            XmlNode yamlAnalyzerNode = projXml.CreateNode(XmlNodeType.Element, "Analyzer", xmlNamespace);
            XmlAttribute yamlIncludeAttribute = projXml.CreateAttribute("Include");
            yamlIncludeAttribute.Value = $@"..\packages\$packageId.$packageVersion\analyzers\dotnet\YamlDotNet.dll";
            yamlAnalyzerNode.Attributes.Append(yamlIncludeAttribute);
            itemGroupNode.AppendChild(yamlAnalyzerNode);

            projXml.SelectSingleNode("//x:Project", nsmgr).AppendChild(itemGroupNode);
            projXml.Save(@"$project");

            XmlNode targetFrameworkNode = projXml.SelectSingleNode("//x:TargetFrameworkVersion", nsmgr);
            var targetFwAttribute = new TargetFrameworkAttribute($".NETFramework, Version={targetFrameworkNode.InnerXml}");
            Regex p = new Regex(@"\d+(\.\d+)+");
            Match m = p.Match(targetFwAttribute.FrameworkName);
            Version targetFwVersion = Version.Parse(m.Value);

            var packagesXml = new XmlDocument();
            packagesXml.Load(@"$packages");

            var packagesNode = packagesXml.SelectSingleNode("//packages");

            XmlNode packageNode = packagesXml.CreateElement("package");

            XmlAttribute idAttribute = packagesXml.CreateAttribute("id");
            idAttribute.Value = "$packageId";
            packageNode.Attributes.Append(idAttribute);

            XmlAttribute versionAttribute = packagesXml.CreateAttribute("version");
            versionAttribute.Value = "$packageVersion";
            packageNode.Attributes.Append(versionAttribute);

            XmlAttribute targetFrameworkAttribute = packagesXml.CreateAttribute("targetFramework");
            targetFrameworkAttribute.Value = $"net{targetFwVersion.ToString().Replace(".", "")}";
            packageNode.Attributes.Append(targetFrameworkAttribute);

            XmlAttribute developmentDependencyAttribute = packagesXml.CreateAttribute("developmentDependency");
            developmentDependencyAttribute.Value = "true";
            packageNode.Attributes.Append(developmentDependencyAttribute);

            packagesNode.AppendChild(packageNode);
            packagesXml.Save(@"$packages");
          }
        }
        "@

            Add-Type -TypeDefinition $code -Language CSharp
            Invoke-Expression "[Program$id]::Main()"
          }

          $xml = [xml](Get-Content -Path $project)
          if ($xml.Project.xmlns) {
            $nsmgr = New-Object System.Xml.XmlNamespaceManager $xml.NameTable
            $nsmgr.AddNamespace('x','http://schemas.microsoft.com/developer/msbuild/2003')
            $x = 'x:'
          }
          $propertyGroups = $xml.SelectNodes("//${x}Project/${x}PropertyGroup", $nsmgr)

          $errorLog = $xml.CreateElement("ErrorLog", $xml.Project.NamespaceURI)
          $errorLog.set_InnerText("analysis.sarif")
          $propertyGroups[0].AppendChild($errorLog)

          if (-not $propertyGroups[0].AdditionalFileItemNames) {
            $additionalFileItemNamesElt = $xml.CreateElement("AdditionalFileItemNames", $xml.Project.NamespaceURI)
            $additionalFileItemNamesElt.set_InnerText('$(AdditionalFileItemNames);Content')
            $propertyGroups[0].AppendChild($additionalFileItemNamesElt)
          }

          $xml.Save($project)
        }
